// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String   
  role      UserRole @default(STORE_OWNER)  
  createdAt DateTime @default(now())

  ownedStores Store[]     @relation("StoreOwner") 
  stores      StoreUser[] 
}


model StoreUser {
  id        String   @id @default(uuid())
  userId    String
  storeId   String
  role      StoreRole @default(MEMBER)
  
  user      User   @relation(fields: [userId], references: [id])
  store     Store  @relation(fields: [storeId], references: [id])

  @@unique([userId, storeId])  
}


model Store {
  id        String   @id @default(uuid())
  name      String
  ownerId   String
  createdAt DateTime @default(now())

  owner     User       @relation("StoreOwner", fields: [ownerId], references: [id])
  members   StoreUser[]
  products  Product[]
  category   Category[]
  orders    Order[]
}



model Category {
  id       String   @id @default(uuid())
  name     String   @unique
  storeId  String   
  store    Store    @relation(fields: [storeId], references: [id])
  products Product[]
}
  
model Product {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Decimal
  stock       Int      @default(0)
  imageUrl    String?
  storeId     String
  categoryId  String?  
  createdAt   DateTime @default(now())

  store       Store    @relation(fields: [storeId], references: [id])
  category    Category? @relation(fields: [categoryId], references: [id]) // Make the relation optional
  orderItems  OrderItem[]
}





model Order {
  id        String   @id @default(uuid())
  storeId   String
  status    OrderStatus @default(PENDING)
  total     Decimal
  createdAt DateTime @default(now())

  store      Store     @relation(fields: [storeId], references: [id])
  orderItems OrderItem[]
  payment    Payment?
  details    OrderDetails?
}


model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal

  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}


model Payment {
  id        String   @id @default(uuid())
  orderId   String   @unique
  amount    Decimal
  status    PaymentStatus @default(PENDING)
  createdAt DateTime @default(now())

  order     Order   @relation(fields: [orderId], references: [id])
}

model OrderDetails {
  id              String   @id @default(uuid())
  orderId         String   @unique
  customerName    String
  email           String
  phoneNumber     String
  address         String
  city            String
  state           String
  postalCode      String
  country         String
  additionalNotes String?
  createdAt       DateTime @default(now())

  order           Order    @relation(fields: [orderId], references: [id])
}


enum UserRole {
  SUPER_ADMIN  
  STORE_OWNER  
}

enum StoreRole {
  ADMIN  
  MEMBER 
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}
